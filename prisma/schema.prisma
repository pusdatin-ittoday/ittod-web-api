generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum education_enum {
  sma
  s1
  d3
  d4
}

enum team_member_role_enum {
  leader
  member
}

enum user_identity_provider_enum {
  google
  basic
  github
}

enum user_identity_role_enum {
  admin
  user
}

enum media_grouping_enum {
  payments
  dokum_tahun_lalu
  competition_submission
  twibbon
}

enum media_type_enum {
  image
  pdf
}

model competition {
  id               String   @id 
  title            String   @db.Text
  description      String   @db.Text
  max_team_member  Int      @default(3)
  guide_book_url   String   @db.Text

  announcements    competition_announcement[]
  submissions      competition_submission[]
  timelines        competition_timeline[]
  teams            team[]
}

model competition_announcement {
  id             String     @id 
  competition_id String     
  author_id      String     
  title          String     @db.Text
  description    String     @db.Text
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  competition competition @relation(fields: [competition_id], references: [id])
  author      user        @relation(fields: [author_id], references: [id])
}

model competition_submission {
  team_id        String     
  competition_id String     
  media_id       String     @unique
  created_at     DateTime   @default(now())
  updated_at     DateTime?  @updatedAt

  team        team        @relation(fields: [team_id], references: [id])
  competition competition @relation(fields: [competition_id], references: [id])
  media       media       @relation(fields: [media_id], references: [id]) 

  @@id ([team_id, competition_id])
}

model competition_timeline {
  id                 String     @id 
  competition_id     String     
  title              String     @db.Text
  date               DateTime

  competition competition @relation(fields: [competition_id], references: [id])
}

model media {
  id          String   @id 
  uploader_id String   
  name        String   @unique
  grouping    media_grouping_enum?
  type        media_type_enum
  url         String
  created_at  DateTime @default(now())

  uploader    user     @relation(fields: [uploader_id], references: [id])
  
  paymentproof team_member?
  twibbon      team_member? @relation("twibbon")
  kartu        team_member? @relation("kartu-mahasiswa")
  submission   competition_submission?
}

model team {
  id                     String   @id 
  competition_id         String   
  team_name              String   @db.Text
  team_code              String   @unique
  is_verified            Boolean  @default(false)
  verification_error     String?  @db.Text
  created_at             DateTime @default(now())
  updated_at             DateTime? @updatedAt

  competition  competition @relation(fields: [competition_id], references: [id])

  members      team_member[]
  submission   competition_submission[]
}

model team_member {
  user_id                 String                  
  team_id                 String                  
  role                    team_member_role_enum
  kartu_media_id          String?                 @unique
  twibbon_media_id        String?                 @unique
  payment_proof_media_id  String?  @unique
  is_verified             Boolean                 @default(false)
  verification_error      String?                 @db.Text

  paymentProof  media?  @relation(fields: [payment_proof_media_id], references: [id])
  user          user  @relation(fields: [user_id], references: [id])
  team          team  @relation(fields: [team_id], references: [id])
  twibbon       media? @relation("twibbon", fields: [twibbon_media_id], references: [id])
  kartu         media? @relation("kartu-mahasiswa", fields: [kartu_media_id], references: [id])

  @@id([user_id, team_id])
}

model user {
  id                        String   @id 
  email                     String   @unique
  full_name                 String?
  birth_date                DateTime?
  pendidikan                education_enum?
  nama_sekolah              String?
  entry_source              String?
  phone_number              String?
  id_line                   String?
  id_discord                String?
  id_instagram              String?
  consent                   Boolean  @default(false)
  is_registration_complete  Boolean  @default(false)
  created_at                DateTime @default(now())
  updated_at                DateTime? @updatedAt

  uploaded                  media[]
  identity                  user_identity?
  announcements             competition_announcement[]
  member                    team_member[] 
}

model user_identity {
  id                                  String   @id 
  email                               String   @unique
  provider                            user_identity_provider_enum
  hash                                String
  is_verified                         Boolean  @default(false)
  verification_token                  String
  verification_token_expiration       DateTime
  password_recovery_token             String?
  password_recovery_token_expiration  DateTime?
  refresh_token                       String?
  role                                user_identity_role_enum? 
  created_at                          DateTime @default(now())
  updated_at                          DateTime? @updatedAt

  user user @relation(fields: [id], references: [id])
} 
