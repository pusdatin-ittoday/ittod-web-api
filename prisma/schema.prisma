generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum team_member_role_renum {
  leader
  member
}

enum user_identity_provider_enum {
  google
  basic
}

enum user_identity_role_enum {
  admin
  user
}

enum media_grouping_enum {
  payments
  dokum_tahun_lalu
  competition_submission
  twibbon
}

enum media_type_enum {
  image
  pdf
}

model competition {
  id               String                @id @db.Varchar(50)
  title            String                @db.Text
  description      String                @db.Text
  max_team_member  Int
  guide_book_url   String?              @db.Text
  announcements    competition_announcement[]
  submissions      competition_submission[]
  timelines        competition_timeline[]
  teams            team[]
}

model competition_announcement {
  id             String     @id @db.Varchar(50)
  competition_id String     @db.Varchar(50)
  author_id      String     @db.Varchar(50)
  title          String     @db.Text
  description    String     @db.Text
  created_at     DateTime   @default(now())
  updated_at     DateTime?

  competition competition @relation(fields: [competition_id], references: [id])
  author      user        @relation(fields: [author_id], references: [id])
}

model competition_submission {
  team_id        String     @id @db.Varchar(50)
  competition_id String     @db.Varchar(50)
  media_id       String     @db.Varchar(50)
  created_at     DateTime   @default(now())
  updated_at     DateTime?

  team        user        @relation(fields: [team_id], references: [id])
  competition competition @relation(fields: [competition_id], references: [id])
  media       media       @relation(fields: [media_id], references: [id])

  @@id([team_id, type])
}

model competition_timeline {
  id                 String     @id @db.Varchar(50)
  competition_id     String     @db.Varchar(50)
  title              String     @db.Text
  date               DateTime

  competition competition @relation(fields: [competition_id], references: [id])
}

model media {
  id         String   @id @db.Varchar(50)
  creator_id String   @db.Varchar(50)
  name       String   @unique
  grouping   media_grouping_enum?
  type       media_type_enum
  url        String
  created_at DateTime @default(now())

  // Relations will be defined by referencing models
}

model team {
  id                     String   @id @db.Varchar(50)
  competition_id         String   @db.Varchar(50)
  team_name              String   @db.Text
  team_code              String   @unique
  payment_proof_media_id String?  @db.Varchar(50)
  is_verified            Boolean  @default(false)
  verification_error     String?  @db.Text
  created_at             DateTime @default(now())
  updated_at             DateTime?

  competition competition @relation(fields: [competition_id], references: [id])
  paymentProof media?     @relation("TeamPaymentProof", fields: [payment_proof_media_id], references: [id])
  members      team_member[]
}

model team_member {
  user_id             String  @db.Varchar(50)
  team_id             String  @db.Varchar(50)
  role                team_member_role_renum
  kartu_media_id      String? @db.Varchar(50)
  twibbon_media_id    String? @db.Varchar(50)
  is_verified         Boolean @default(false)
  verification_error  String? @db.Text

  user     user  @relation(fields: [user_id], references: [id])
  team     team  @relation(fields: [team_id], references: [id])
  twibbon  media? @relation("TwibbonMedia", fields: [twibbon_media_id], references: [id])

  @@id([user_id, team_id])
}

model user {
  id                        String   @id @db.Varchar(50)
  email                     String   @unique
  full_name                 String?
  birth_date                DateTime?
  entry_source              String?
  instance                  String?
  phone_number              String?
  id_line                   String?
  id_discord                String?
  id_instagram              String?
  consent                   Boolean  @default(false)
  is_registration_complete  Boolean  @default(false)
  created_at                DateTime @default(now())
  updated_at                DateTime?

  identity                  user_identity?
  announcements             competition_announcement[] user_identity_provider_enum@relation("UserAnnouncements")
  submissions               competition_submission[] @relation("UserSubmissions")
}

model user_identity {
  id                                  String   @id @db.Varchar(50)
  email                               String   @unique
  provider                            
  hash                                String
  is_verified                         Boolean  @default(false)
  verification_token                  String
  verification_token_expiration       DateTime
  password_recovery_token             String?
  password_recovery_token_expiration  DateTime?
  refresh_token                       String?
  role                                user_identity_role_enum @default(user)
  created_at                          DateTime @default(now())
  updated_at                          DateTime?
}

